generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
    id             String    @id @default(uuid())
    email          String    @unique
    password       String    
    needsPasswordChange Boolean? @default(false)
    role           UserRole  @default(user)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt     
    bookings       Booking[]
    reviews        Review[]
    cartItems      CartItem[]
    blogPosts  BlogPost[]
    feedbacks      Feedback[]
    notifications  Notification[] 
    profile        Profile?
}

model Profile {
    id             String    @id @default(uuid())
    userId         String    @unique
    user           User      @relation(fields: [userId], references: [id])
    username       String?    @unique
    firstName      String?   
    lastName       String?   
    dateOfBirth    DateTime?
    phoneNumber    String?   
    address        String?  
    bio            String?  
    profileImage   String?   
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt 
}


model Service {
    id          String          @id @default(uuid())
    name        String
    description String
    price       Int
    categoryId  String
    category    ServiceCategory @relation(fields: [categoryId], references: [id])
    reviews     Review[]
    bookings    Booking[]
    cartItems   CartItem[]
    availabilities Availability[]
}

model ServiceCategory {
    id       String    @id @default(uuid())
    name     String
    services Service[] 
}

model Booking {
    id            String         @id @default(uuid())
    userId        String
    user          User           @relation(fields: [userId], references: [id])
    serviceId     String
    service       Service        @relation(fields: [serviceId], references: [id])
    scheduledDate DateTime
    status        BookingStatus  @default(pending)
}

model Review {
    id        String      @id @default(uuid())
    userId    String
    user      User        @relation(fields: [userId], references: [id])
    serviceId String
    service   Service     @relation(fields: [serviceId], references: [id])
    review    String
    rating    RatingValue
}

model CartItem {
    id        String  @id @default(uuid())
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    serviceId String
    service   Service @relation(fields: [serviceId], references: [id])
    quantity  Int
}

model Availability {
    id         String    @id @default(uuid())
    serviceId  String
    service    Service   @relation(fields: [serviceId], references: [id])
    startDate  DateTime
    endDate    DateTime
    startTime  String
    endTime    String
    daysOfWeek Json
}


model BlogPost {
    id         String    @id @default(uuid())
    title      String
    content    String
    authorId   String    
    author     User      @relation(fields: [authorId], references: [id])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    @@index([authorId])
}


model Feedback {
    id         String   @id @default(uuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    content    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}
model FAQ {
    id         String    @id @default(uuid())
    question   String
    answer     String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model Notification {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
}


enum UserRole {
    user
    admin
    superAdmin
}

enum BookingStatus {
    pending
    confirmed
    cancelled
}

enum RatingValue {
    RATING_ONE
    RATING_TWO
    RATING_THREE
    RATING_FOUR
    RATING_FIVE
}